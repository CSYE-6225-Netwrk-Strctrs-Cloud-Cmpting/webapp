name: Packer Build

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Dependencies
        run: npm install

      - name: Run Integration Tests
        run: npm run test

      - name: Install Packer
        uses: hashicorp/setup-packer@v2
        with:
          version: latest

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}  # ‚úÖ This ensures AWS region is passed

      
          
      - name: Debug - Check if webapp.zip exists before proceeding
        run: |
          if [ ! -f "packer/webapp.zip" ]; then 
            echo "‚ùå ERROR: webapp.zip not found in packer/ directory!";
            exit 1;
          else
            echo "‚úÖ webapp.zip exists, proceeding..."
          fi

      - name: Copy webapp.zip to /tmp/
        run: |
          cp packer/webapp.zip /tmp/webapp.zip
          echo "‚úÖ webapp.zip copied to /tmp/"
          ls -lah /tmp/webapp.zip  # Verify file exists
      
      - name: Build Packer Configuration
        run: |
          packer build packer/machine-image.pkr.hcl | tee output.log

      - name: Set up Google Cloud SDK  
        uses: google-github-actions/auth@v2  
        with:    
            project_id: ${{ secrets.GCP_PROJECT_ID }}    
            credentials_json: ${{ secrets.GCP_SA_KEY }}


      - name: Initialize Packer
        run: packer init packer/machine-image.pkr.hcl

      - name: Validate Packer Configuration
        run: packer validate packer/machine-image.pkr.hcl

      - name: Build Packer Image
        run: |
          packer build packer/machine-image.pkr.hcl | tee output.log
      
      # Step 12: Extract the AWS AMI ID from the build log
      - name: Extract AMI ID (AWS)
        run: |
          # Flexible regex to capture any valid AMI ID
          AMI_ID=$(grep -oP 'ami-[a-zA-Z0-9]+' output.log | tail -1)
          
          # Check if AMI ID is empty and exit with error if it is
          if [ -z "$AMI_ID" ]; then
            echo "‚ùå ERROR: AMI ID not found in output.log."
            echo "üîç Full output log for debugging:"
            cat output.log
            exit 1
          fi

          # If found, print the AMI ID
          echo "‚úÖ AMI ID created: $AMI_ID"

      # Step 13: Share the GCP image with another GCP project
      - name: Share Image with Another GCP Project
        run: |
          # Extract the latest custom image name from GCP
          IMAGE_NAME=$(gcloud compute images list --filter="name~'my-custom-image-*'" --format="value(name)" | head -n1)

          # Check if the image name is found
          if [ -z "$IMAGE_NAME" ]; then
            echo "‚ùå ERROR: No matching GCP image found."
            exit 1
          fi

          echo "‚úÖ Found Image Name: $IMAGE_NAME"
          
          # Add IAM policy to share the image with another project
          gcloud compute images add-iam-policy-binding "$IMAGE_NAME" \
            --member="project:${{ secrets.GCP_DEMO_PROJECT_ID }}" \
            --role="roles/compute.imageUser"