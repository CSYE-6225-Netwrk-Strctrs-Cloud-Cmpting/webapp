name: CI/CD on PR Merge

on:
  pull_request:
    types:
      - closed
    branches:
      - main

jobs:
  deploy:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    env:
      AWS_REGION: us-east-1
      AWS_PROFILE: dev-account
      S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
      DEMO_ACCOUNT_ID: ${{ secrets.DEMO_ACCOUNT_ID }}
      LAUNCH_TEMPLATE_PREFIX: ${{ secrets.LAUNCH_TEMPLATE_PREFIX }}
      ASG_NAME: ${{ secrets.ASG_NAME }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Dependencies
        run: npm install

      - name: Run Unit Tests
        run: npm test

      - name: Install Packer
        uses: hashicorp/setup-packer@v2
        with:
          version: latest

      - name: Configure AWS Credentials (DEV)
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Validate & Build AMI with Packer
        run: |
          packer init packer/machine-image.pkr.hcl
          packer validate packer/machine-image.pkr.hcl
          packer build -var "AWS_REGION=${{ env.AWS_REGION }}" \
                       -var "AWS_PROFILE=${{ env.AWS_PROFILE }}" \
                       -var "S3_BUCKET_NAME=${{ env.S3_BUCKET_NAME }}" \
                       packer/machine-image.pkr.hcl | tee output.log

      - name: Extract AMI ID
        id: extract_ami
        run: |
          AMI_ID=$(grep -oP 'ami-[a-zA-Z0-9]+' output.log | tail -1)
          echo "ami_id=$AMI_ID" >> $GITHUB_OUTPUT

      - name: Share AMI with DEMO account
        run: |
          aws ec2 modify-image-attribute \
            --image-id ${{ steps.extract_ami.outputs.ami_id }} \
            --launch-permission "Add=[{UserId=${{ env.DEMO_ACCOUNT_ID }}}]"

      - name: Reconfigure AWS Credentials for DEMO
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.DEMO_AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.DEMO_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get Launch Template ID by Prefix
        id: get_lt
        run: |
          LT_ID=$(aws ec2 describe-launch-templates \
            --filters "Name=launch-template-name,Values=${{ env.LAUNCH_TEMPLATE_PREFIX }}*" \
            --query 'LaunchTemplates[0].LaunchTemplateId' \
            --output text)
          echo "lt_id=$LT_ID" >> $GITHUB_OUTPUT

      - name: Create New Launch Template Version
        id: new_lt_version
        run: |
          VERSION=$(aws ec2 create-launch-template-version \
            --launch-template-id ${{ steps.get_lt.outputs.lt_id }} \
            --source-version 1 \
            --launch-template-data "{\"ImageId\":\"${{ steps.extract_ami.outputs.ami_id }}\"}" \
            --query 'LaunchTemplateVersion.VersionNumber' \
            --output text)
          echo "new_version=$VERSION" >> $GITHUB_OUTPUT

      - name: Set Default Launch Template Version
        run: |
          aws ec2 modify-launch-template \
            --launch-template-id ${{ steps.get_lt.outputs.lt_id }} \
            --default-version ${{ steps.new_lt_version.outputs.new_version }}

      - name: Start Instance Refresh
        id: start_refresh
        run: |
          REFRESH_ID=$(aws autoscaling start-instance-refresh \
            --auto-scaling-group-name ${{ env.ASG_NAME }} \
            --query 'InstanceRefreshId' --output text)
          echo "refresh_id=$REFRESH_ID" >> $GITHUB_OUTPUT

      - name: Wait for Instance Refresh to Complete
        run: |
          while true; do
            STATUS=$(aws autoscaling describe-instance-refreshes \
              --auto-scaling-group-name ${{ env.ASG_NAME }} \
              --instance-refresh-ids ${{ steps.start_refresh.outputs.refresh_id }} \
              --query 'InstanceRefreshes[0].Status' \
              --output text)
            echo "Current status: $STATUS"
            if [[ "$STATUS" == "Successful" ]]; then
              echo "Instance refresh completed successfully."
              exit 0
            elif [[ "$STATUS" == "Failed" || "$STATUS" == "Cancelled" ]]; then
              echo "Instance refresh failed."
              exit 1
            fi
            sleep 30
          done
