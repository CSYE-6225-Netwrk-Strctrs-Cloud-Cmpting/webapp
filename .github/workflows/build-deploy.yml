name: Build and Deploy

on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  build:
    # Only run when the PR is merged (not when it's just closed without merging)
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    env:
      AWS_REGION: us-east-1
      DEV_PROFILE: dev
      DEMO_PROFILE: demo
      S3_BUCKET_NAME: csye62252025

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Dependencies
        run: npm install

      - name: Run Integration Tests
        run: npm run test

      - name: Install Packer
        uses: hashicorp/setup-packer@v2
        with:
          version: latest

      # Configure AWS Credentials for DEV account
      - name: Configure AWS DEV Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Ensure Required Files Exist
        run: |
          [ -f "webapp.zip" ] || { echo "ERROR: webapp.zip not found."; exit 1; }
          [ -f "packer/cloudwatch-agent-config.json" ] || { echo "ERROR: cloudwatch-agent-config.json not found."; exit 1; }
          echo "All required files are present."

      - name: Initialize Packer
        run: packer init packer/machine-image.pkr.hcl

      - name: Validate Packer Configuration
        run: packer validate packer/machine-image.pkr.hcl

      - name: Build Packer Image
        run: |
          packer build -var "AWS_REGION=${{ env.AWS_REGION }}" \
                       -var "AWS_PROFILE=${{ env.DEV_PROFILE }}" \
                       -var "S3_BUCKET_NAME=${{ env.S3_BUCKET_NAME }}" \
                       packer/machine-image.pkr.hcl | tee output.log

      - name: Extract AMI ID
        id: extract_ami
        run: |
          AMI_ID=$(grep -oP 'ami-[a-zA-Z0-9]+' output.log | tail -1)
          if [ -z "$AMI_ID" ]; then
            echo "ERROR: AMI ID not found."
            exit 1
          fi
          echo "AMI ID created: $AMI_ID"
          echo "ami_id=$AMI_ID" >> $GITHUB_OUTPUT

      # Switch to DEMO account credentials
      - name: Configure AWS DEMO Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.DEMO_AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.DEMO_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Get current Launch Template
      - name: Get Launch Template info
        id: get_launch_template
        run: |
          LAUNCH_TEMPLATE_NAME="${{ secrets.LAUNCH_TEMPLATE_PREFIX }}"
          LAUNCH_TEMPLATE_INFO=$(aws ec2 describe-launch-templates --launch-template-names "$LAUNCH_TEMPLATE_NAME" --query 'LaunchTemplates[0]')
          LAUNCH_TEMPLATE_ID=$(echo $LAUNCH_TEMPLATE_INFO | jq -r '.LaunchTemplateId')
          LAUNCH_TEMPLATE_DEFAULT_VERSION=$(echo $LAUNCH_TEMPLATE_INFO | jq -r '.DefaultVersionNumber')
          
          echo "launch_template_id=$LAUNCH_TEMPLATE_ID" >> $GITHUB_OUTPUT
          echo "launch_template_default_version=$LAUNCH_TEMPLATE_DEFAULT_VERSION" >> $GITHUB_OUTPUT
          echo "Found Launch Template $LAUNCH_TEMPLATE_NAME with ID $LAUNCH_TEMPLATE_ID, default version $LAUNCH_TEMPLATE_DEFAULT_VERSION"

      # Create new Launch Template version
      - name: Create new Launch Template version
        id: create_lt_version
        run: |
          LAUNCH_TEMPLATE_ID="${{ steps.get_launch_template.outputs.launch_template_id }}"
          CURRENT_VERSION="${{ steps.get_launch_template.outputs.launch_template_default_version }}"
          
          # Create new version with updated AMI ID
          NEW_VERSION=$(aws ec2 create-launch-template-version \
            --launch-template-id "$LAUNCH_TEMPLATE_ID" \
            --version-description "Updated AMI to ${{ steps.extract_ami.outputs.ami_id }}" \
            --source-version "$CURRENT_VERSION" \
            --launch-template-data "{\"ImageId\": \"${{ steps.extract_ami.outputs.ami_id }}\"}" \
            --query 'LaunchTemplateVersion.VersionNumber' \
            --output text)
          
          echo "New Launch Template version created: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          
          # Set as default version
          aws ec2 modify-launch-template \
            --launch-template-id "$LAUNCH_TEMPLATE_ID" \
            --default-version "$NEW_VERSION"
          
          echo "Set version $NEW_VERSION as default"

      # Start instance refresh
      - name: Start instance refresh
        id: start_refresh
        run: |
          ASG_NAME="${{ secrets.ASG_NAME }}"
          
          REFRESH_ID=$(aws autoscaling start-instance-refresh \
            --auto-scaling-group-name "$ASG_NAME" \
            --preferences '{"MinHealthyPercentage": 90, "InstanceWarmup": 300}' \
            --query 'InstanceRefreshId' \
            --output text)
          
          echo "Started instance refresh with ID: $REFRESH_ID"
          echo "refresh_id=$REFRESH_ID" >> $GITHUB_OUTPUT

      # Wait for instance refresh to complete
      - name: Wait for instance refresh to complete
        run: |
          ASG_NAME="${{ secrets.ASG_NAME }}"
          REFRESH_ID="${{ steps.start_refresh.outputs.refresh_id }}"
          
          echo "Waiting for instance refresh to complete..."
          
          while true; do
            STATUS=$(aws autoscaling describe-instance-refreshes \
              --auto-scaling-group-name "$ASG_NAME" \
              --instance-refresh-ids "$REFRESH_ID" \
              --query 'InstanceRefreshes[0].Status' \
              --output text)
            
            echo "Current status: $STATUS"
            
            if [[ "$STATUS" == "Successful" ]]; then
              echo "Instance refresh completed successfully!"
              break
            elif [[ "$STATUS" == "Failed" || "$STATUS" == "Cancelled" ]]; then
              echo "Instance refresh failed or was cancelled."
              exit 1
            fi
            
            echo "Waiting 30 seconds before checking again..."
            sleep 30
          done